// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0

package db

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type Status string

const (
	StatusSENT   Status = "SENT"
	StatusFAILED Status = "FAILED"
)

func (e *Status) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Status(s)
	case string:
		*e = Status(s)
	default:
		return fmt.Errorf("unsupported scan type for Status: %T", src)
	}
	return nil
}

type NullStatus struct {
	Status Status `json:"status"`
	Valid  bool   `json:"valid"` // Valid is true if Status is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullStatus) Scan(value interface{}) error {
	if value == nil {
		ns.Status, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Status.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Status), nil
}

type Listing struct {
	ID             string           `json:"id"`
	SubscriptionID pgtype.UUID      `json:"subscription_id"`
	Title          string           `json:"title"`
	Price          string           `json:"price"`
	EngineVolume   string           `json:"engine_volume"`
	Transmission   string           `json:"transmission"`
	BodyType       string           `json:"body_type"`
	Mileage        string           `json:"mileage"`
	Location       string           `json:"location"`
	Link           string           `json:"link"`
	Date           pgtype.Timestamp `json:"date"`
	IsNeedSend     bool             `json:"is_need_send"`
	CreatedAt      pgtype.Timestamp `json:"created_at"`
	UpdatedAt      pgtype.Timestamp `json:"updated_at"`
}

type Notification struct {
	ID        pgtype.UUID      `json:"id"`
	ListingID string           `json:"listing_id"`
	Status    Status           `json:"status"`
	Reason    string           `json:"reason"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
	UpdatedAt pgtype.Timestamp `json:"updated_at"`
}

type Subscription struct {
	ID        pgtype.UUID      `json:"id"`
	UserID    int64            `json:"user_id"`
	Brand     string           `json:"brand"`
	Model     []string         `json:"model"`
	Chassis   []string         `json:"chassis"`
	PriceFrom string           `json:"price_from"`
	PriceTo   string           `json:"price_to"`
	YearFrom  string           `json:"year_from"`
	YearTo    string           `json:"year_to"`
	Region    []string         `json:"region"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
	UpdatedAt pgtype.Timestamp `json:"updated_at"`
}

type User struct {
	ID        int64            `json:"id"`
	Username  string           `json:"username"`
	FirstName string           `json:"first_name"`
	LastName  string           `json:"last_name"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
	UpdatedAt pgtype.Timestamp `json:"updated_at"`
}
