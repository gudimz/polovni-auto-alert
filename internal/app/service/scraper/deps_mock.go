// Code generated by MockGen. DO NOT EDIT.
// Source: deps.go
//
// Generated by this command:
//
//	mockgen -source=deps.go -destination=deps_mock.go -package=scraper
//

// Package scraper is a generated GoMock package.
package scraper

import (
	context "context"
	reflect "reflect"

	ds "github.com/gudimz/polovni-auto-alert/internal/pkg/ds"
	polovniauto "github.com/gudimz/polovni-auto-alert/pkg/polovniauto"
	gomock "go.uber.org/mock/gomock"
)

// MockPolovniAutoAdapter is a mock of PolovniAutoAdapter interface.
type MockPolovniAutoAdapter struct {
	ctrl     *gomock.Controller
	recorder *MockPolovniAutoAdapterMockRecorder
}

// MockPolovniAutoAdapterMockRecorder is the mock recorder for MockPolovniAutoAdapter.
type MockPolovniAutoAdapterMockRecorder struct {
	mock *MockPolovniAutoAdapter
}

// NewMockPolovniAutoAdapter creates a new mock instance.
func NewMockPolovniAutoAdapter(ctrl *gomock.Controller) *MockPolovniAutoAdapter {
	mock := &MockPolovniAutoAdapter{ctrl: ctrl}
	mock.recorder = &MockPolovniAutoAdapterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPolovniAutoAdapter) EXPECT() *MockPolovniAutoAdapterMockRecorder {
	return m.recorder
}

// GetNewListings mocks base method.
func (m *MockPolovniAutoAdapter) GetNewListings(ctx context.Context, params map[string]string) ([]polovniauto.Listing, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNewListings", ctx, params)
	ret0, _ := ret[0].([]polovniauto.Listing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNewListings indicates an expected call of GetNewListings.
func (mr *MockPolovniAutoAdapterMockRecorder) GetNewListings(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNewListings", reflect.TypeOf((*MockPolovniAutoAdapter)(nil).GetNewListings), ctx, params)
}

// MockFetcher is a mock of Fetcher interface.
type MockFetcher struct {
	ctrl     *gomock.Controller
	recorder *MockFetcherMockRecorder
}

// MockFetcherMockRecorder is the mock recorder for MockFetcher.
type MockFetcherMockRecorder struct {
	mock *MockFetcher
}

// NewMockFetcher creates a new mock instance.
func NewMockFetcher(ctrl *gomock.Controller) *MockFetcher {
	mock := &MockFetcher{ctrl: ctrl}
	mock.recorder = &MockFetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFetcher) EXPECT() *MockFetcherMockRecorder {
	return m.recorder
}

// GetChassisFromJSON mocks base method.
func (m *MockFetcher) GetChassisFromJSON() (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChassisFromJSON")
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChassisFromJSON indicates an expected call of GetChassisFromJSON.
func (mr *MockFetcherMockRecorder) GetChassisFromJSON() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChassisFromJSON", reflect.TypeOf((*MockFetcher)(nil).GetChassisFromJSON))
}

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// GetAllSubscriptions mocks base method.
func (m *MockRepository) GetAllSubscriptions(ctx context.Context) ([]ds.SubscriptionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSubscriptions", ctx)
	ret0, _ := ret[0].([]ds.SubscriptionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllSubscriptions indicates an expected call of GetAllSubscriptions.
func (mr *MockRepositoryMockRecorder) GetAllSubscriptions(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSubscriptions", reflect.TypeOf((*MockRepository)(nil).GetAllSubscriptions), ctx)
}

// GetListingsBySubscriptionID mocks base method.
func (m *MockRepository) GetListingsBySubscriptionID(ctx context.Context, subscriptionID string) ([]ds.ListingResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListingsBySubscriptionID", ctx, subscriptionID)
	ret0, _ := ret[0].([]ds.ListingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListingsBySubscriptionID indicates an expected call of GetListingsBySubscriptionID.
func (mr *MockRepositoryMockRecorder) GetListingsBySubscriptionID(ctx, subscriptionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListingsBySubscriptionID", reflect.TypeOf((*MockRepository)(nil).GetListingsBySubscriptionID), ctx, subscriptionID)
}

// UpsertListing mocks base method.
func (m *MockRepository) UpsertListing(ctx context.Context, listing ds.UpsertListingRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertListing", ctx, listing)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertListing indicates an expected call of UpsertListing.
func (mr *MockRepositoryMockRecorder) UpsertListing(ctx, listing any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertListing", reflect.TypeOf((*MockRepository)(nil).UpsertListing), ctx, listing)
}
