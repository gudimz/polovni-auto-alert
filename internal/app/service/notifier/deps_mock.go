// Code generated by MockGen. DO NOT EDIT.
// Source: deps.go
//
// Generated by this command:
//
//	mockgen -source=deps.go -destination=deps_mock.go -package=notifier
//

// Package notifier is a generated GoMock package.
package notifier

import (
	context "context"
	reflect "reflect"

	ds "github.com/gudimz/polovni-auto-alert/internal/pkg/ds"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateSubscription mocks base method.
func (m *MockRepository) CreateSubscription(ctx context.Context, sub ds.SubscriptionRequest) (ds.SubscriptionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSubscription", ctx, sub)
	ret0, _ := ret[0].(ds.SubscriptionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSubscription indicates an expected call of CreateSubscription.
func (mr *MockRepositoryMockRecorder) CreateSubscription(ctx, sub any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubscription", reflect.TypeOf((*MockRepository)(nil).CreateSubscription), ctx, sub)
}

// DeleteListingsBySubscriptionIDs mocks base method.
func (m *MockRepository) DeleteListingsBySubscriptionIDs(ctx context.Context, ids []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteListingsBySubscriptionIDs", ctx, ids)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteListingsBySubscriptionIDs indicates an expected call of DeleteListingsBySubscriptionIDs.
func (mr *MockRepositoryMockRecorder) DeleteListingsBySubscriptionIDs(ctx, ids any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteListingsBySubscriptionIDs", reflect.TypeOf((*MockRepository)(nil).DeleteListingsBySubscriptionIDs), ctx, ids)
}

// DeleteSubscriptionByID mocks base method.
func (m *MockRepository) DeleteSubscriptionByID(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSubscriptionByID", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSubscriptionByID indicates an expected call of DeleteSubscriptionByID.
func (mr *MockRepositoryMockRecorder) DeleteSubscriptionByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSubscriptionByID", reflect.TypeOf((*MockRepository)(nil).DeleteSubscriptionByID), ctx, id)
}

// DeleteSubscriptionsByUserID mocks base method.
func (m *MockRepository) DeleteSubscriptionsByUserID(ctx context.Context, userID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSubscriptionsByUserID", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSubscriptionsByUserID indicates an expected call of DeleteSubscriptionsByUserID.
func (mr *MockRepositoryMockRecorder) DeleteSubscriptionsByUserID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSubscriptionsByUserID", reflect.TypeOf((*MockRepository)(nil).DeleteSubscriptionsByUserID), ctx, userID)
}

// DeleteUserByID mocks base method.
func (m *MockRepository) DeleteUserByID(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserByID", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserByID indicates an expected call of DeleteUserByID.
func (mr *MockRepositoryMockRecorder) DeleteUserByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserByID", reflect.TypeOf((*MockRepository)(nil).DeleteUserByID), ctx, id)
}

// GetSubscriptionsByUserID mocks base method.
func (m *MockRepository) GetSubscriptionsByUserID(ctx context.Context, userID int64) ([]ds.SubscriptionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscriptionsByUserID", ctx, userID)
	ret0, _ := ret[0].([]ds.SubscriptionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscriptionsByUserID indicates an expected call of GetSubscriptionsByUserID.
func (mr *MockRepositoryMockRecorder) GetSubscriptionsByUserID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriptionsByUserID", reflect.TypeOf((*MockRepository)(nil).GetSubscriptionsByUserID), ctx, userID)
}

// UpsertUser mocks base method.
func (m *MockRepository) UpsertUser(ctx context.Context, request ds.UserRequest) (ds.UserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertUser", ctx, request)
	ret0, _ := ret[0].(ds.UserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertUser indicates an expected call of UpsertUser.
func (mr *MockRepositoryMockRecorder) UpsertUser(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertUser", reflect.TypeOf((*MockRepository)(nil).UpsertUser), ctx, request)
}
