// Code generated by MockGen. DO NOT EDIT.
// Source: deps.go
//
// Generated by this command:
//
//	mockgen -source=deps.go -destination=deps_mock.go -package=worker
//

// Package worker is a generated GoMock package.
package worker

import (
	context "context"
	reflect "reflect"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	ds "github.com/gudimz/polovni-auto-alert/internal/pkg/ds"
	telegram "github.com/gudimz/polovni-auto-alert/pkg/telegram"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateNotification mocks base method.
func (m *MockRepository) CreateNotification(ctx context.Context, notification ds.CreateNotificationRequest) (ds.NotificationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNotification", ctx, notification)
	ret0, _ := ret[0].(ds.NotificationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNotification indicates an expected call of CreateNotification.
func (mr *MockRepositoryMockRecorder) CreateNotification(ctx, notification any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNotification", reflect.TypeOf((*MockRepository)(nil).CreateNotification), ctx, notification)
}

// DeleteListingsBySubscriptionIDs mocks base method.
func (m *MockRepository) DeleteListingsBySubscriptionIDs(ctx context.Context, ids []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteListingsBySubscriptionIDs", ctx, ids)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteListingsBySubscriptionIDs indicates an expected call of DeleteListingsBySubscriptionIDs.
func (mr *MockRepositoryMockRecorder) DeleteListingsBySubscriptionIDs(ctx, ids any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteListingsBySubscriptionIDs", reflect.TypeOf((*MockRepository)(nil).DeleteListingsBySubscriptionIDs), ctx, ids)
}

// DeleteSubscriptionsByUserID mocks base method.
func (m *MockRepository) DeleteSubscriptionsByUserID(ctx context.Context, userID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSubscriptionsByUserID", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSubscriptionsByUserID indicates an expected call of DeleteSubscriptionsByUserID.
func (mr *MockRepositoryMockRecorder) DeleteSubscriptionsByUserID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSubscriptionsByUserID", reflect.TypeOf((*MockRepository)(nil).DeleteSubscriptionsByUserID), ctx, userID)
}

// DeleteUserByID mocks base method.
func (m *MockRepository) DeleteUserByID(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserByID", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserByID indicates an expected call of DeleteUserByID.
func (mr *MockRepositoryMockRecorder) DeleteUserByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserByID", reflect.TypeOf((*MockRepository)(nil).DeleteUserByID), ctx, id)
}

// GetListingsByIsNeedSend mocks base method.
func (m *MockRepository) GetListingsByIsNeedSend(ctx context.Context, isNeedSend bool) ([]ds.ListingResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListingsByIsNeedSend", ctx, isNeedSend)
	ret0, _ := ret[0].([]ds.ListingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListingsByIsNeedSend indicates an expected call of GetListingsByIsNeedSend.
func (mr *MockRepositoryMockRecorder) GetListingsByIsNeedSend(ctx, isNeedSend any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListingsByIsNeedSend", reflect.TypeOf((*MockRepository)(nil).GetListingsByIsNeedSend), ctx, isNeedSend)
}

// GetSubscriptionByID mocks base method.
func (m *MockRepository) GetSubscriptionByID(ctx context.Context, id string) (ds.SubscriptionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscriptionByID", ctx, id)
	ret0, _ := ret[0].(ds.SubscriptionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscriptionByID indicates an expected call of GetSubscriptionByID.
func (mr *MockRepositoryMockRecorder) GetSubscriptionByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriptionByID", reflect.TypeOf((*MockRepository)(nil).GetSubscriptionByID), ctx, id)
}

// GetSubscriptionsByUserID mocks base method.
func (m *MockRepository) GetSubscriptionsByUserID(ctx context.Context, userID int64) ([]ds.SubscriptionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscriptionsByUserID", ctx, userID)
	ret0, _ := ret[0].([]ds.SubscriptionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscriptionsByUserID indicates an expected call of GetSubscriptionsByUserID.
func (mr *MockRepositoryMockRecorder) GetSubscriptionsByUserID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriptionsByUserID", reflect.TypeOf((*MockRepository)(nil).GetSubscriptionsByUserID), ctx, userID)
}

// UpsertListing mocks base method.
func (m *MockRepository) UpsertListing(ctx context.Context, listing ds.UpsertListingRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertListing", ctx, listing)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertListing indicates an expected call of UpsertListing.
func (mr *MockRepositoryMockRecorder) UpsertListing(ctx, listing any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertListing", reflect.TypeOf((*MockRepository)(nil).UpsertListing), ctx, listing)
}

// MockTgBot is a mock of TgBot interface.
type MockTgBot struct {
	ctrl     *gomock.Controller
	recorder *MockTgBotMockRecorder
}

// MockTgBotMockRecorder is the mock recorder for MockTgBot.
type MockTgBotMockRecorder struct {
	mock *MockTgBot
}

// NewMockTgBot creates a new mock instance.
func NewMockTgBot(ctrl *gomock.Controller) *MockTgBot {
	mock := &MockTgBot{ctrl: ctrl}
	mock.recorder = &MockTgBotMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTgBot) EXPECT() *MockTgBotMockRecorder {
	return m.recorder
}

// GetAPI mocks base method.
func (m *MockTgBot) GetAPI() *tgbotapi.BotAPI {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAPI")
	ret0, _ := ret[0].(*tgbotapi.BotAPI)
	return ret0
}

// GetAPI indicates an expected call of GetAPI.
func (mr *MockTgBotMockRecorder) GetAPI() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPI", reflect.TypeOf((*MockTgBot)(nil).GetAPI))
}

// GetCfg mocks base method.
func (m *MockTgBot) GetCfg() *telegram.Config {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCfg")
	ret0, _ := ret[0].(*telegram.Config)
	return ret0
}

// GetCfg indicates an expected call of GetCfg.
func (mr *MockTgBotMockRecorder) GetCfg() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCfg", reflect.TypeOf((*MockTgBot)(nil).GetCfg))
}

// SendMessage mocks base method.
func (m *MockTgBot) SendMessage(c tgbotapi.Chattable) (tgbotapi.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", c)
	ret0, _ := ret[0].(tgbotapi.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockTgBotMockRecorder) SendMessage(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockTgBot)(nil).SendMessage), c)
}

// SetCommands mocks base method.
func (m *MockTgBot) SetCommands(commands []tgbotapi.BotCommand) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCommands", commands)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetCommands indicates an expected call of SetCommands.
func (mr *MockTgBotMockRecorder) SetCommands(commands any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCommands", reflect.TypeOf((*MockTgBot)(nil).SetCommands), commands)
}
