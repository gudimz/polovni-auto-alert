services:
  notifier:
    image: notifier:latest
    build:
      context: .
      dockerfile: Dockerfile
      args:
        BINARY: notifier
    command: /app/notifier
    restart: always
    environment:
      - LOG_LEVEL=${LOG_LEVEL}
      - TELEGRAM_API_TOKEN=${TELEGRAM_API_TOKEN}
      - TELEGRAM_UPDATE_CONFIG_TIMEOUT=${TELEGRAM_UPDATE_CONFIG_TIMEOUT}
      - TELEGRAM_DEBUG=${TELEGRAM_DEBUG}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - DB_SSLMODE=${DB_SSLMODE}
    depends_on:
      db:
        condition: service_healthy
    networks:
      - internal

  scraper:
    image: scraper:latest
    build:
      context: .
      dockerfile: Dockerfile
      args:
        BINARY: scraper
    command: /app/scraper
    restart: always
    environment:
      - LOG_LEVEL=${LOG_LEVEL}
      - SCRAPER_INTERVAL=${SCRAPER_INTERVAL}
      - PAGE_LIMIT=${PAGE_LIMIT}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - DB_SSLMODE=${DB_SSLMODE}
    depends_on:
      db:
        condition: service_healthy
    networks:
      - internal

  worker:
    image: worker:latest
    build:
      context: .
      dockerfile: Dockerfile
      args:
        BINARY: worker
    command: /app/worker
    restart: always
    environment:
      - LOG_LEVEL=${LOG_LEVEL}
      - WORKER_NOTIFICATION_INTERVAL=${WORKER_NOTIFICATION_INTERVAL}
      - TELEGRAM_API_TOKEN=${TELEGRAM_API_TOKEN}
      - TELEGRAM_UPDATE_CONFIG_TIMEOUT=${TELEGRAM_UPDATE_CONFIG_TIMEOUT}
      - TELEGRAM_DEBUG=${TELEGRAM_DEBUG}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - DB_SSLMODE=${DB_SSLMODE}
    depends_on:
      db:
        condition: service_healthy
    networks:
      - internal

  db:
    image: postgres:15
    restart: always
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    networks:
      - internal
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER}" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s

networks:
  internal:
    driver: bridge

volumes:
  postgres_data:
